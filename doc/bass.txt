*bass.txt*	Bass runtime files

INTRODUCTION						*bass-introduction*

Bass runtime files for Vim.


BASS					*ft-bass-indent* *bass-indent*

Bass indentation differs somewhat from traditional Lisps, due in part to the
use of square and curly brackets, and otherwise by community convention. These
conventions are not universally followed, so the Bass indent script offers a
few configuration options.

(If the current Vim does not include |searchpairpos()|, the indent script falls
back to normal 'lisp' indenting, and the following options are ignored.)


							*g:bass_maxlines*

Sets maximum scan distance of `searchpairpos()`.  Larger values trade
performance for correctness when dealing with very long forms.  A value of
0 will scan without limits.  The default is 300.


						*g:bass_fuzzy_indent*
					*g:bass_fuzzy_indent_patterns*
					*g:bass_fuzzy_indent_blacklist*

The 'lispwords' option is a list of comma-separated words that mark special
forms whose subforms should be indented with two spaces.

For example:
>
	(defn bad []
	      "Incorrect indentation")

	(defn good []
	  "Correct indentation")
<
If you would like to specify 'lispwords' with a |pattern| instead, you can use
the fuzzy indent feature:
>
	" Default
	let g:bass_fuzzy_indent = 1
	let g:bass_fuzzy_indent_patterns = ['^with', '^def', '^let']
	let g:bass_fuzzy_indent_blacklist =
		\ ['-fn$', '\v^with-%(meta|out-str|loading-context)$']
<
|g:bass_fuzzy_indent_patterns| and |g:bass_fuzzy_indent_blacklist| are lists
of patterns that will be matched against the unqualified symbol at the head of
a list.  This means that a pattern like `"^foo"` will match all these
candidates: `foobar`, `my.ns/foobar`, and `#'foobar`.

Each candidate word is tested for special treatment in this order:

	1. Return true if word is literally in 'lispwords'
	2. Return false if word matches a pattern in
	   |g:bass_fuzzy_indent_blacklist|
	3. Return true if word matches a pattern in
	   |g:bass_fuzzy_indent_patterns|
	4. Return false and indent normally otherwise


					*g:bass_special_indent_words*

Some forms in Bass are indented such that every subform is indented by only
two spaces, regardless of 'lispwords'.  If you have a custom construct that
should be indented in this idiosyncratic fashion, you can add your symbols to
the default list below.
>
	" Default
	let g:bass_special_indent_words =
	   \ 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'
<

					*g:bass_align_multiline_strings*

Align subsequent lines in multi-line strings to the column after the opening
quote, instead of the same column.

For example:
>
	(def default
	  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
	  enim ad minim veniam, quis nostrud exercitation ullamco laboris
	  nisi ut aliquip ex ea commodo consequat.")

	(def aligned
	  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	   eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
	   enim ad minim veniam, quis nostrud exercitation ullamco laboris
	   nisi ut aliquip ex ea commodo consequat.")
<

						*g:bass_align_subforms*

By default, parenthesized compound forms that look like function calls and
whose head subform is on its own line have subsequent subforms indented by
two spaces relative to the opening paren:
>
	(foo
	  bar
	  baz)
<
Setting this option to `1` changes this behaviour so that all subforms are
aligned to the same column, emulating the default behaviour of
bass-mode.el:
>
	(foo
	 bar
	 baz)
<

BASS							*ft-bass-syntax*

Syntax highlighting of bindings from the Bass stdlib is provided by default,
but additional symbols can be highlighted by adding them to the
`g:bass_syntax_keywords` variable. The value should be a |Dictionary| of
syntax group names, each containing a |List| of identifiers.
>
	let g:bass_syntax_keywords = {
	    \   'bassMacro': ["defproject", "defcustom"],
	    \   'bassFunc': ["string/join", "string/replace"]
	    \ }
<
Refer to the Bass syntax script for valid syntax group names.

There is also *b:bass_syntax_keywords* which is a buffer-local variant of this
variable intended for use by plugin authors to highlight symbols dynamically.

By setting the *b:bass_syntax_without_core_keywords* variable, vars from Bass
stdlib will not be highlighted by default.

Setting *g:bass_fold* to `1` will enable the folding of Bass code.  Any list,
vector or map that extends over more than one line can be folded using the
standard Vim |fold-commands|.


ABOUT							*bass-about*

This document and associated runtime files are maintained at:

	https://github.com/vito/bass.vim

Distributed under the Vim license. See |license|.

syntax/bass.vim:

        Copyright © 2008–2012, Meikel Brandmeyer <mb@kotka.de>
        Copyright © 2007–2008, Toralf Wittner <toralf.wittner@gmail.com>

ftdetect/bass.vim,
ftplugin/bass.vim,
indent/bass.vim:

        Copyright © 2008–2012, Meikel Brandmeyer <mb@kotka.de>

Modified and relicensed under the Vim License:

        Copyright © 2021, Alex Suraci <suraci.alex@gmail.com>
        Copyright © 2020–2021, The clojure-vim contributors
        Copyright © 2013–2018, Sung Pae <self@sungpae.com>

Last Change: %%RELEASE_DATE%%

 vim:tw=78:noet:sw=8:sts=8:ts=8:ft=help:norl:
